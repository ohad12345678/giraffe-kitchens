"""
Seed script to populate initial data for Giraffe Kitchens.
Run this after creating the database schema.
"""
from app.db.base import SessionLocal
from app.models.user import User, UserRole
from app.models.branch import Branch
from app.models.dish import Dish
from app.models.chef import Chef
from app.core.security import get_password_hash
from chefs_data import CHEFS_BY_BRANCH


def seed_branches(db):
    """Seed 9 branches."""
    branches = [
        Branch(name="Giraffe ◊ó◊ô◊§◊î", location="◊ó◊ô◊§◊î"),
        Branch(name="Giraffe ◊î◊®◊¶◊ú◊ô◊î", location="◊î◊®◊¶◊ú◊ô◊î"),
        Branch(name="Giraffe ◊ú◊†◊ì◊û◊®◊ß", location="◊™◊ú ◊ê◊ë◊ô◊ë - ◊ú◊†◊ì◊û◊®◊ß"),
        Branch(name="Giraffe ◊®◊û◊™ ◊î◊ó◊ô◊ô◊ú", location="◊™◊ú ◊ê◊ë◊ô◊ë - ◊®◊û◊™ ◊î◊ó◊ô◊ô◊ú"),
        Branch(name="Giraffe ◊†◊° ◊¶◊ô◊ï◊†◊î", location="◊†◊° ◊¶◊ô◊ï◊†◊î"),
        Branch(name="Giraffe ◊°◊ë◊ô◊ï◊ü", location="◊°◊ë◊ô◊ï◊ü"),
        Branch(name="Giraffe ◊®◊ê◊©◊ï◊ü ◊ú◊¶◊ô◊ï◊ü", location="◊®◊ê◊©◊ï◊ü ◊ú◊¶◊ô◊ï◊ü"),
        Branch(name="Giraffe ◊û◊ï◊ì◊ô◊¢◊ô◊ü", location="◊û◊ï◊ì◊ô◊¢◊ô◊ü"),
        Branch(name="Giraffe ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î", location="◊§◊™◊ó ◊™◊ß◊ï◊ï◊î"),
    ]

    for branch in branches:
        existing = db.query(Branch).filter(Branch.name == branch.name).first()
        if not existing:
            db.add(branch)

    db.commit()
    print("‚úÖ Branches seeded")


def seed_users(db):
    """Seed HQ users and branch managers."""
    # Get all branches
    branches = db.query(Branch).all()
    branch_map = {branch.name: branch for branch in branches}

    # Create HQ users with real emails
    hq_users = [
        {"email": "ohadb@giraffe.co.il", "name": "Ohad Banay"},
        {"email": "nofar@giraffe.co.il", "name": "Nofar"},
        {"email": "aviv@giraffe.co.il", "name": "Aviv"},
        {"email": "alma@giraffe.co.il", "name": "Almog"},
        {"email": "talz@giraffe.co.il", "name": "Talz"},
        {"email": "avital@giraffe.co.il", "name": "Avital"},
    ]

    for user_data in hq_users:
        existing = db.query(User).filter(User.email == user_data["email"]).first()
        if not existing:
            hq_user = User(
                email=user_data["email"],
                password_hash=get_password_hash("123"),
                full_name=f"{user_data['name']} (HQ)",
                role=UserRole.HQ,
                branch_id=None
            )
            db.add(hq_user)

    # Create branch managers with real emails
    branch_managers = [
        {"email": "harel@giraffe.co.il", "name": "◊î◊®◊ê◊ú", "branch": "Giraffe ◊ó◊ô◊§◊î"},
        {"email": "hemi@giraffe.co.il", "name": "◊î◊û◊ô", "branch": "Giraffe ◊®◊û◊™ ◊î◊ó◊ô◊ô◊ú"},
        {"email": "pini@giraffe.co.il", "name": "◊§◊ô◊†◊ô", "branch": "Giraffe ◊ú◊†◊ì◊û◊®◊ß"},
        {"email": "ella@giraffe.co.il", "name": "◊ê◊ú◊î", "branch": "Giraffe ◊†◊° ◊¶◊ô◊ï◊†◊î"},
        {"email": "ori@giraffe.co.il", "name": "◊ê◊ï◊®◊ô", "branch": "Giraffe ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î"},
        {"email": "chen@giraffe.co.il", "name": "◊ó◊ü", "branch": "Giraffe ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î"},
    ]

    for manager_data in branch_managers:
        existing = db.query(User).filter(User.email == manager_data["email"]).first()
        if not existing:
            branch = branch_map.get(manager_data["branch"])
            if branch:
                manager = User(
                    email=manager_data["email"],
                    password_hash=get_password_hash("123"),
                    full_name=manager_data["name"],
                    role=UserRole.BRANCH_MANAGER,
                    branch_id=branch.id
                )
                db.add(manager)
            else:
                print(f"‚ö†Ô∏è  Warning: Branch '{manager_data['branch']}' not found for {manager_data['name']}")

    # Create generic managers for branches without real users
    for branch in branches:
        has_manager = db.query(User).filter(
            User.branch_id == branch.id,
            User.role == UserRole.BRANCH_MANAGER
        ).first()

        if not has_manager:
            branch_short = branch.name.lower().replace('giraffe ', '').replace(' ', '')
            generic_manager = User(
                email=f"{branch_short}@giraffe.com",
                password_hash=get_password_hash("123"),
                full_name=f"Manager - {branch.name}",
                role=UserRole.BRANCH_MANAGER,
                branch_id=branch.id
            )
            existing = db.query(User).filter(User.email == generic_manager.email).first()
            if not existing:
                db.add(generic_manager)

    db.commit()
    print("‚úÖ Users seeded")


def seed_dishes(db):
    """Seed common dishes."""
    dishes = [
        # ◊®◊ê◊©◊ï◊†◊ï◊™
        {"name": "◊°◊ú◊ò ◊ê◊ô◊ú◊†◊ì◊ô", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊°◊ú◊ò ◊ë◊®◊ô◊ê◊ï◊™", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊°◊ú◊ò ◊û◊ú◊§◊§◊ï◊†◊ô◊ù", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊ë◊®◊ô◊ï◊© ◊ò◊®◊ò◊® ◊ô◊ù", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊ò◊®◊ò◊® ◊û◊ô◊ñ◊ï", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊°◊©◊ô◊û◊ô ◊°◊ú◊û◊ï◊ü", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊ò◊ï◊ß◊ô◊ï ◊°◊ë◊ô◊¶'◊î", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊°◊ú◊ò ◊ì◊í ◊ú◊ë◊ü", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},
        {"name": "◊°◊ú◊ò ◊û◊ô◊°◊ï ◊°◊ô◊ñ◊®", "category": "◊®◊ê◊©◊ï◊†◊ï◊™"},

        # ◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™
        {"name": "◊ß◊®◊ô◊°◊§◊ô ◊©◊®◊ô◊û◊§◊°", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ë◊ê◊ü ◊ì◊í", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ë◊ê◊ü ◊ë◊©◊®", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ë◊ê◊ü ◊¢◊ï◊£", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊í◊ô◊ï◊ñ◊î", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ë◊ô◊ô◊ë◊ô ◊ì◊ê◊û◊§◊ú◊ô◊†◊í", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ß◊ú◊û◊®◊ô ◊û◊ò◊ï◊í◊ü", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},
        {"name": "◊ê◊í◊®◊ï◊ú", "category": "◊®◊ê◊©◊ï◊†◊ï◊™ ◊ó◊û◊ï◊™"},

        # ◊°◊ï◊©◊ô
        {"name": "◊ê◊ï◊ß◊ô◊†◊ê◊ï◊ï◊î ◊î◊†◊ì ◊®◊ï◊ú", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊ï◊ï◊í'◊ô ◊®◊ï◊ú", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊ï◊ï◊í'◊ô ◊í◊®◊†◊ì◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊û◊ê◊ß◊ô ◊°◊ú◊û◊ï◊ü", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊ì◊®◊í◊ï◊ü ◊ß◊®◊ê◊†◊•'", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊°◊ú◊û◊ï◊ü ◊û◊ê◊ï◊ì◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊©◊®◊ô◊û◊§◊° ◊ò◊û◊§◊ï◊®◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊û◊ê◊ß◊ô ◊ò◊ï◊†◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊°◊ú◊û◊ï◊ü ◊í◊®◊†◊ì◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊°◊§◊ô◊ô◊©◊ú ◊°◊§◊ô◊ô◊°◊ô ◊°◊ú◊û◊ï◊ü", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊°◊§◊ô◊ô◊°◊ô ◊ò◊ï◊†◊î", "category": "◊°◊ï◊©◊ô"},
        {"name": "◊¶'◊ô◊ñ◊ï ◊®◊ï◊ú", "category": "◊°◊ï◊©◊ô"},

        # ◊ê◊ï◊®◊ñ
        {"name": "◊¶'◊ê◊ñ◊î", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊°◊ô◊†◊ò◊î ◊°◊¶'◊ï◊ê◊ü", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊¢◊ï◊£ ◊ë◊ú◊ô◊û◊ï◊ü", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊ê◊§◊í◊†◊ô◊™", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊ß◊ê◊®◊ô ◊õ◊™◊ï◊ù", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊ê◊ï◊®◊ñ ◊û◊ò◊ï◊í◊ü", "category": "◊ê◊ï◊®◊ñ"},
        {"name": "◊§◊ô◊ú◊î ◊°◊ú◊û◊ï◊ü", "category": "◊ê◊ï◊®◊ñ"},

        # ◊¶'◊ô◊®◊ê◊©◊ô
        {"name": "◊¶'◊ô◊®◊ê◊©◊ô ◊°◊ú◊û◊ï◊ü ◊û◊ê◊ï◊ì◊î", "category": "◊¶'◊ô◊®◊ê◊©◊ô"},
        {"name": "◊¶'◊ô◊®◊ê◊©◊ô ◊°◊ú◊û◊ï◊ü", "category": "◊¶'◊ô◊®◊ê◊©◊ô"},
        {"name": "◊¶'◊ô◊®◊ê◊©◊ô ◊ò◊ï◊§◊ï", "category": "◊¶'◊ô◊®◊ê◊©◊ô"},

        # ◊ï◊ï◊ß
        {"name": "◊î◊û◊†◊î ◊î◊ó◊®◊ô◊§◊î", "category": "◊ï◊ï◊ß"},
        {"name": "◊°◊ô◊†◊ò◊î ◊†◊ï◊ì◊ú◊°", "category": "◊ï◊ï◊ß"},
        {"name": "◊î◊ß◊ô◊°◊®◊ô◊™ ◊î◊ó◊ì◊©◊î", "category": "◊ï◊ï◊ß"},
        {"name": "◊§◊ô◊ú◊ô◊§◊ô◊†◊ô◊™", "category": "◊ï◊ï◊ß"},
        {"name": "◊ë◊ê◊ò◊® ◊†◊ï◊ì◊ú◊°", "category": "◊ï◊ï◊ß"},
        {"name": "◊°◊ú◊û◊ï◊ü ◊ê◊ï◊ì◊ï◊ü", "category": "◊ï◊ï◊ß"},
        {"name": "◊û◊ú◊ê◊ñ◊ô◊™", "category": "◊ï◊ï◊ß"},
        {"name": "◊ë◊ô◊£ ◊®◊ô◊ô◊°", "category": "◊ï◊ï◊ß"},
        {"name": "◊§◊ê◊ì ◊™◊ê◊ô ◊ß◊ú◊ê◊°◊ô", "category": "◊ï◊ï◊ß"},
        {"name": "◊§◊ê◊ì ◊™◊ê◊ô ◊ó◊®◊ô◊£", "category": "◊ï◊ï◊ß"},
        {"name": "◊ê◊ò◊®◊ô◊ï◊™ ◊©◊ó◊ï◊®◊ï◊™", "category": "◊ï◊ï◊ß"},

        # ◊û◊®◊ß◊ô◊ù
        {"name": "◊û◊®◊ß ◊¢◊ì◊©◊ô◊ù", "category": "◊û◊®◊ß◊ô◊ù"},
        {"name": "◊û◊®◊ß ◊™◊ô◊®◊°", "category": "◊û◊®◊ß◊ô◊ù"},
        {"name": "◊û◊®◊ß ◊™◊ê◊ô◊ú◊†◊ì◊ô", "category": "◊û◊®◊ß◊ô◊ù"},
    ]

    for dish_data in dishes:
        existing = db.query(Dish).filter(Dish.name == dish_data["name"]).first()
        if not existing:
            db.add(Dish(**dish_data))

    db.commit()
    print("‚úÖ Dishes seeded")


def seed_chefs(db):
    """Seed real Chinese chefs for each branch from chefs_data.py"""
    branches = db.query(Branch).all()

    # First, delete all existing generic chefs
    deleted_count = db.query(Chef).delete()
    if deleted_count > 0:
        print(f"üóëÔ∏è  Deleted {deleted_count} old generic chef names")

    # Add real Chinese chef names from chefs_data.py
    total_chefs = 0
    for branch in branches:
        if branch.name in CHEFS_BY_BRANCH:
            chef_names = CHEFS_BY_BRANCH[branch.name]
            for name in chef_names:
                existing = db.query(Chef).filter(
                    Chef.name == name,
                    Chef.branch_id == branch.id
                ).first()

                if not existing:
                    chef = Chef(
                        name=name,
                        branch_id=branch.id
                    )
                    db.add(chef)
                    total_chefs += 1
        else:
            print(f"‚ö†Ô∏è  Warning: No chefs defined for {branch.name}")

    db.commit()
    print(f"‚úÖ Seeded {total_chefs} Chinese chefs across all branches")


def main():
    """Run all seed functions."""
    db = SessionLocal()

    try:
        print("üå± Starting database seeding...")
        seed_branches(db)
        seed_users(db)
        seed_dishes(db)
        seed_chefs(db)
        print("‚úÖ Database seeding complete!")

        # Print login credentials
        print("\nüìù Login Credentials:")
        print("\nüëî HQ Users (all password: 123):")
        print("  - ohadb@giraffe.co.il")
        print("  - nofar@giraffe.co.il")
        print("  - aviv@giraffe.co.il")
        print("  - alma@giraffe.co.il")
        print("  - talz@giraffe.co.il")
        print("\nüè¢ Branch Managers (all password: 123):")
        print("  - harel@giraffe.co.il (◊ó◊ô◊§◊î)")
        print("  - hemi@giraffe.co.il (◊®◊û◊™ ◊î◊ó◊ô◊ô◊ú)")
        print("  - pini@giraffe.co.il (◊ú◊†◊ì◊û◊®◊ß)")
        print("  - ella@giraffe.co.il (◊†◊° ◊¶◊ô◊ï◊†◊î)")
        print("  - ori@giraffe.co.il (◊§◊™◊ó ◊™◊ß◊ï◊ï◊î)")
        print("  - chen@giraffe.co.il (◊§◊™◊ó ◊™◊ß◊ï◊ï◊î)")

    except Exception as e:
        print(f"‚ùå Error seeding database: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    main()
